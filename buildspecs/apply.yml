version: 0.2

phases:
  install:
    commands:
      - echo "Updating system packages"
      - yum update -y
      - yum install -y python3 python3-devel gcc libffi-devel openssl-devel
      - python3 --version  # Check the installed Python version
      - pip --version
      - pip install --upgrade pip
      - pip --version
  pre_build:
    commands:
        # Configure Git for CodeCommit
      - echo "Configuring CodeCommit Git credential helper"
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git clone https://git-codecommit/lambda_function-module

      - echo "DEPLOYMENT_ENVIRONMENT = $DEPLOYMENT_ENVIRONMENT"
      - >
        if [ "$DEPLOYMENT_ENVIRONMENT" = "production" ]; then
          ROLE_ARN_KEY="/codepipeline/production/roleArn"
          ENV_TAG="production"
        elif [ "$DEPLOYMENT_ENVIRONMENT" = "staging" ]; then
          ROLE_ARN_KEY="/codepipeline/staging/roleArn"
          ENV_TAG="staging"
        else
          ROLE_ARN_KEY="/codepipeline/development/roleArn"
          ENV_TAG="development"
        fi
      - echo "ROLE_ARN_KEY after if condition = $ROLE_ARN_KEY"
      - echo "ENV_TAG = $ENV_TAG"
      - echo "ENV_PREFIX = $ENV_PREFIX"
      - ROLE_ARN=$(aws ssm get-parameter --name "$ROLE_ARN_KEY" --query 'Parameter.Value' --output text)
      - export ROLE_ARN
      - export ENV_TAG
      - >
        ASSUME_ROLE_CREDS=$(aws sts assume-role --role-arn $ROLE_ARN --role-session-name codebuild-session)
      - export AWS_ACCESS_KEY_ID=$(echo $ASSUME_ROLE_CREDS | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo $ASSUME_ROLE_CREDS | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo $ASSUME_ROLE_CREDS | jq -r '.Credentials.SessionToken')

  build:
    commands:
      - echo "Iterating over directories to apply Terraform configurations with dynamic tagging"
      - |
        for dir in *; do
          if [ -d "$dir" ]; then
            echo "Processing directory: $dir"
            DIR_NAME=$(basename "$dir")
            echo "Applying Terraform in $dir with Environment tag as $ENV_TAG and Prefix as $ENV_PREFIX"
            cd $dir
            # Dynamically generate backend.tf from the template in each directory
            sed "s/\${environment}/$ENV_TAG/g" backend.tf.tmpl > backend.tf
            terraform init -input=false
            terraform fmt
            terraform validate
            
            # Determine workspace based on environment
            case "$ENV_TAG" in
              development)
                WORKSPACE_NAME="dev"
                ;;
              staging)
                WORKSPACE_NAME="stg"
                ;;
              production)
                WORKSPACE_NAME="prod"
                ;;
              *)
                echo "Unknown environment: $ENV_TAG"
                exit 1
                ;;
            esac

            echo "Using workspace: $WORKSPACE_NAME"

            # Select or create the workspace
            terraform workspace select $WORKSPACE_NAME || terraform workspace new $WORKSPACE_NAME

            # Apply the deployment with dynamic environment prefix
            terraform apply -auto-approve -input=false -var "role_arn=$ROLE_ARN" -var "environment=$ENV_TAG"
            cd - > /dev/null
          fi
        done

  post_build:
    commands:
      - echo "Build and deployment completed for the $ENV_TAG environment."
